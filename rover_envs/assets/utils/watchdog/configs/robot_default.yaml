---

# Configuration file for robot parameters.

name: RobotName,                          # Will be used in future update
robot_model_path: /robot_folder/your_robot.usd,    # relative path to robots folder e.g. /aau_rover/Mars_Rover.usd
controller_config: controltype,           # Control type, options: ackermann, skidsteer or diffdrive

# ───────────────────────────────────────────────────────────────
# Controller Parameters Configuration
# Depending on the selected controller type (action_cfg),
# different parameters are required.
# ───────────────────────────────────────────────────────────────

# ── Skid-Steering / Differential Drive Parameters ───────────
# These parameters are used for skid-steering and differential drive vehicles.
#
# - scale: Scaling factor for the control inputs. Default: [1.0, 1.0]
# - offset: Offset applied to the control inputs. Default: [0.0, 0.0]
# - track_width: Distance between the left and right wheels [meters].
# - wheel_radius: Radius of the wheels [meters].
# - drive_joint_names: Names of the wheel joints (can be regex or individual).
# - drive_order: # Ordering of drive joints, should match prim names/prefixes
#
# Example:
# scale: [1.0, 1.0]          # Default: [1.0, 1.0]
# offset: [0.0, 0.0]         # Default: [0.0, 0.0]
# track_width: 1.0           # [meters] Distance between left & right wheels
# wheel_radius: 1.0          # [meters] Wheel radius
# drive_joint_names: [".*Drive_Joint"] # Names of wheel joints (regex supported)

# ── Ackermann Steering Parameters ───────────────────────────
# These parameters are used for Ackermann-style steering vehicles.
#

# - wheelbase_length: Distance between front and rear wheels [meters].
# - middle_wheel_distance: Distance between middle wheels [meters].
# - rear_and_front_wheel_distance: Distance between the rear and front wheels [meters].
# - wheel_radius: Radius of the wheels [meters].
# - min_steering_radius: Minimum turning radius of the vehicle [meters].
#   If lower than this value, the vehicle will turn on the spot.
# - steering_joint_names: Names of the steering joints (regex or individual).
# - drive_joint_names: Names of wheel joints (regex or individual).
# - scale: Scaling factor for the control inputs. Default: [1.0, 1.0]
# - offset: Offset applied to the control inputs. Default: [0.0, 0.0]
# - steering_order: Ordering of steering joints, should match prim names/prefixes.
# - drive_order: Ordering of drive joints, should match prim names/prefixes.
#
# Example:
# wheelbase_length: 1.0,                             # [meters] Distance between front & rear wheels
# middle_wheel_distance: 1.0,                        # [meters] Distance between middle wheels
# rear_and_front_wheel_distance: 1.0,                # [meters] Distance between front & rear wheels
# wheel_radius: 1.0,                                 # [meters] Wheel radius
# min_steering_radius: 1.0,                          # [meters] Minimum turning radius
# steering_joint_names: [".*Steer_Joint"],           # Steering joints (regex supported)
# drive_joint_names: [".*Drive_Joint"],              # Drive joints (regex supported)
# offset: [0.0, 0.0],                                # Default: [1.0, 1.0]
# scale: [1.0, 1.0],                                 # Default: [0.0, 0.0]
# steering_order: ["FL", "FR", "RL", "RR"],          # Steering joint order
# drive_order: ["FL", "FR", "CL", "CR", "RL", "RR"], # Drive joint order]

controller:
  {
     asset_name: robot,                                 # Asset name (No reason to change)
     wheelbase_length: 0.849,                           # [meters] Distance between front & rear wheels
     middle_wheel_distance: 0.849,                      # [meters] Distance between middle wheels
     rear_and_front_wheel_distance: 0.77,               # [meters] Distance between front & rear wheels
     wheel_radius: 0.1,                                 # [meters] Wheel radius
     min_steering_radius: 0.8,                          # [meters] Minimum turning radius
     steering_joint_names: [".*Steer_Revolute"],        # Steering joints (regex supported)
     drive_joint_names: [".*Drive_Continuous"],         # Drive joints (regex supported)
     offset: 0.0135,                                    # Default: 0.0
     scale: [1.0, 1.0],                                 # Default: [0.0, 0.0]
     steering_order: ["FL", "FR", "RL", "RR"],          # Steering joint order
     drive_order: ["FL", "FR", "CL", "CR", "RL", "RR"], # Drive joint order]
  }

# ── Joint setup ─────────────────────────────────────────────
# Joint configuration setup
# Depending on the types of joints on the rover model
# this configuration can contain various types of joints
# Ensure that it fits within the scope
# ────────────────────────────────────────────────────────────

# ── Skid-Steering / Differential Drive Parameters ───────────
#
# Usual parameters for skidsteering:
# base_drive: #
#     {
#      joint_names_expr: [".*Drive_Continuous"],# Drive joints (regex supported)
#      velocity_limit: 6,                     # [radians/second|revolute, meters/second/prismatic] maximum velocity of the joint(s)
#      effort_limit: 12,                      # [Newton meters] maximum effort of the joint(s)
#      stiffness: 100.0,                      # [Linear drive: kg/s^2, angular drive: (kg * m"2)/(s^2*angle)]
#      damping: 4000.0                        # [Linear drive: kg/s, angular drive: (kg*m"2)/(s*angle)]
#     },
# E.g. for Leo rover passive joints should be added too
#     passive_joints:
#    {
#      joint_names_expr: [".*Bogie_Joint"],# Bogie joints (regex supported)
#      velocity_limit: 6,,                    # [radians/second|revolute, meters/second/prismatic] maximum velocity of the joint(s)
#      effort_limit: 0,                       # [Newton meters] maximum effort of the joint(s)
#      stiffness: 0.0,                        # [Linear drive: kg/s^2, angular drive: (kg * m"2)/(s^2*angle)]
#      damping: 0.0,                          # [Linear drive: kg/s, angular drive: (kg*m"2)/(s*angle)]
#    }
#
# ── Ackermann Steering Parameters ───────────────────────────
# Ackermann requires some joints which can steer the direction
# of the drive joints.
#
# Usual parameters for ackermann:
# base_drive:
#   {
#   joint_names_expr: [".*Drive_Continuous"], # Drive joints (regex supported)
#     velocity_limit: 6,                      # [rad/s|revolute, m/s|prismatic] maximum velocity of the joint(s)
#     effort_limit: 12,                       # [Nm] maximum effort of the joint(s)
#     stiffness: 100.0,                       # [kg/s^2|Linear drive, (kg * m"2)/(s^2*angle)|angular drive]
#     damping: 4000.0                         # [kg/s|Linear drive, (kg*m"2)/(s*angle)|angular drive]
#   },
#   base_steering:
#   {
#     joint_names_expr: [".*Steer_Revolute"], # Steer joints (regex supported)
#     velocity_limit: 6,                      # [rad/s|revolute, m/s|prismatic] maximum velocity of the joint(s)
#     effort_limit: 12,                       # [Nm] maximum effort of the joint(s)
#     stiffness: 8000.0,                      # [kg/s^2|Linear drive, (kg * m"2)/(s^2*angle)|angular drive]
#     damping: 1000.0,                        # [kg/s|Linear drive, (kg*m"2)/(s*angle)|angular drive]
#   },

joints:
  {
    base_drive:
    {
      joint_names_expr: [".*Drive_Continuous"],
      velocity_limit: 6, # [m/s]
      effort_limit: 12,
      stiffness: 100.0,
      damping: 4000.0
    },
    base_steering:
    {
      joint_names_expr: [".*Steer_Revolute"],
      velocity_limit: 6,
      effort_limit: 12,
      stiffness: 8000.0,
      damping: 1000.0,
    },
    passive_joints:
    {
      joint_names_expr: [".*(Rocker|Differential)_Revolute"],
      velocity_limit: 6,
      effort_limit: 0,
      stiffness: 0.0,
      damping: 0.0,
    }
  }

# ── Simulation parameters ───────────────────────────────────
# Collision, rigidbody and simulation properties are all related
# to the simulation, only tune if you have knowledge hereof.
# ────────────────────────────────────────────────────────────

collision_properties: # Properties related to collision with the robot
  {
    contact_offset: 0.04,                       # [meters] Offset considered contact with other object
    rest_offset: 0.01                           # [meters] Offset considered rest at contact with object
  }
rigidBody_properties: # Properties of the rigid body
  {
    max_linear_velocity: 1.5,                   # [m/s]
    max_angular_velocity: 4.0,                  # [rad/s]
    max_depenetration_velocity: 0.5,            # [m/s] makes collision response slower
    disable_gravity: False,                     # [Bool] whether to disable gravity for the body
  }
simulation_properties: # Simulation properties
  {
    self_collision: False,                      # Allow collision of the individual parts of the robot
    solver_position_iteration_count: 32,        # Number of iterations when solving for position
    solver_velocity_iteration_count: 4,         # Number of iterations when solving for velocity
  }

# ── Initial parameters config ────────────────────────────────────
# Configuration of the robot and joint position and velocity at the
# beginning of simulation, can be set for individual joints.
# ─────────────────────────────────────────────────────────────────

pose_config:
  {
    init_pose: [0.0, 0.0, 0.0],                 # [m] Initial pose
    joint_pose: # initial joint poses
    {
      pose_config: # Pose
      {
        names: [".*Steer_Revolute"],            # Names of joints
        values: [0.0]                           # and their initial velocities
      },
      velocity_config: # Velocity
      {
        names: [".*Steer_Revolute", ".*Drive_Continuous"], # Names of joints
        values: [0.0, 0.0]                      # and their initial velocities
      }
    }
  }
